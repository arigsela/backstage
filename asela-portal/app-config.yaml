app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  kubernetesIngestor:
    # Mappings of kubernetes resource metadata to backstage entity metadata 
    # The list bellow are the default values when the mappings are not set in the app-config.yaml
    # The recommended values are:
    # namespaceModel: 'cluster' # cluster, namespace, default
    # nameModel: 'name-cluster' # name-cluster, name-namespace, name
    # titleModel: 'name' # name, name-cluster, name-namespace
    # systemModel: 'cluster-namespace' # cluster, namespace, cluster-namespace, default
    # referencesNamespaceModel: 'default' # default, same
    mappings:
      namespaceModel: 'cluster' # cluster, namespace, default
      nameModel: 'name-cluster' # name-cluster, name-namespace, name
      titleModel: 'name' # name, name-cluster, name-namespace
      systemModel: 'namespace' # cluster, namespace, cluster-namespace, default
      referencesNamespaceModel: 'default' # default, same
    components:
      # Whether to enable creation of backstage components for Kubernetes workloads
      enabled: true
      taskRunner:
        # How often to query the clusters for data
        frequency: 10
        # Max time to process the data per cycle
        timeout: 600 
      # Namespaces to exclude the resources from
      excludedNamespaces: 
        - kube-public
        - kube-system
      # Custom Resource Types to also generate components for
      customWorkloadTypes:
        - group: pkg.crossplane.io
          apiVersion: v1
          plural: providers
      # By default all standard kubernetes workload types are ingested. This allows you to disable this behavior
      disableDefaultWorkloadTypes: false
      # Allows ingestion to be opt-in or opt-out by either requiring or not a dedicated annotation to ingest a resource (terasky.backstage.io/add-to-catalog or terasky.backstage.io/exclude-from-catalog)
      onlyIngestAnnotatedResources: false
    crossplane:
      claims:
        # Whether to create components for all claim resources in your cluster
        ingestAllClaims: true
      xrds:
        # Settings related to the final steps of a software template
        publishPhase:
          # Base URLs of Git servers you want to allow publishing to
          allowedTargets: ['github.com', 'gitlab.com']
          # What to publish to. currently supports github, gitlab, bitbucket, and YAML (provides a link to download the file)
          target: github
          git:
            # Follows the backstage standard format which is github.com?owner=<REPO OWNER>&repo=<REPO NAME>
            repoUrl: 
            targetBranch: main
          # Whether the user should be able to select the repo they want to push the manifest to or not
          allowRepoSelection: true
        # Whether to enable the creation of software templates for all XRDs
        enabled: true
        taskRunner:
          # How often to query the clusters for data
          frequency: 10
          # Max time to process the data per cycle
          timeout: 600 
        # Allows ingestion to be opt-in or opt-out by either requiring or not a dedicated annotation to ingest a xrd (terasky.backstage.io/add-to-catalog or terasky.backstage.io/exclude-from-catalog)
        ingestAllXRDs: true
        # Will convert default values from the XRD into placeholders in the UI instead of always adding them to the generated manifest.
        convertDefaultValuesToPlaceholders: true
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  enabled: true
  policies:
    - allow:
        actions: ["*"]
        identities: ["guest"]
        resources: ["scaffolder"]
